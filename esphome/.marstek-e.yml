esp32:
  board: esp32dev
  framework:
    type: arduino


# Configure UART for MAX485 module connected to GPIO16/GPIO17
uart:
  - id: mod_bus
    rx_pin: GPIO16
    tx_pin: GPIO17
    baud_rate: 115200
    data_bits: 8
    stop_bits: 1
    parity: NONE

modbus:
  - uart_id: mod_bus
    id: modbus1
    send_wait_time: 20ms

modbus_controller:
  - id: mt
    address: 0x1
    modbus_id: modbus1
    command_throttle: 30ms
    update_interval: 500ms

web_server:
  version: 3
  include_internal: False
  local: True
  sorting_groups:
    - id: Info
      name: "Info"
      sorting_weight: -40
    - id: Control
      name: "Control"
      sorting_weight: -30
    - id: Status
      name: "Status"
      sorting_weight: -20
    - id: Diagnostic
      name: "Diagnostic"
      sorting_weight: -10

# Tekstsensoren
text_sensor:
  - platform: modbus_controller
    name: "${friendly_name} Device Name"
    icon: mdi:rename-outline
    id: device_name
    modbus_controller_id: mt
    register_type: holding
    address: 31000
    register_count: 10
    response_size: 20
    skip_updates: 60
    entity_category: diagnostic
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 7

  - platform: template
    name: "${friendly_name} Software Version"
    id: software_version_text
    icon: mdi:factory
    update_interval: never  # updates only when sensor triggers
    entity_category: diagnostic
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 8

  - platform: template
    name: "${friendly_name} Firmware Version"
    id: firmware_version_text
    icon: mdi:factory
    update_interval: never  # updates only when sensor triggers
    entity_category: diagnostic
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 9

  - platform: template
    name: "${friendly_name} BMS Version"
    id: bms_version_text
    icon: mdi:factory
    update_interval: never  # updates only when sensor triggers
    entity_category: diagnostic
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 10

  - platform: template
    name: "${friendly_name} Inverter State"
    lambda: |-
      switch (int(id(inverter_state).state)) {
        case 0: return std::string("Sleep");
        case 1: return std::string("Standby");
        case 2: return std::string("Charge");
        case 3: return std::string("Discharge");
        case 4: return std::string("Fault");
        case 5: return std::string("Idle");
        case 6: return std::string("AC bypass");
        default: return std::string("Unknown");
      };
    update_interval: 2s
    web_server:
      sorting_group_id: Info
      sorting_weight: 4

#  - platform: modbus_controller
#    id: wifi_status
#    name: "Wifi status"
#    modbus_controller_id: mt
#    register_type: holding
#    address: 30300
#    raw_encode: NONE
#    icon: mdi:wifi-alert
#    entity_category: diagnostic
#    skip_updates: 60
#    lambda: |-
#      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
#      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
#      std::string mode_str;
#      switch (int_mode) {
#        case 0:  mode_str = "Disconnected"; break;
#        case 1:  mode_str = "Connected"; break;
#      }
#      return mode_str;
#    web_server:
#      sorting_group_id: Diagnostic
#      sorting_weight: 20

#  - platform: modbus_controller
#    id: bt_status
#    name: "BT status"
#    modbus_controller_id: mt
#    register_type: holding
#    address: 30301
#    raw_encode: NONE
#    icon: mdi:home-heart
#    entity_category: diagnostic
#    skip_updates: 60
#    lambda: |-
#      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
#      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
#      std::string mode_str;
#      switch (int_mode) {
#        case 0:  mode_str = "Off"; break;
#        case 1:  mode_str = "Active after boot"; break;
#        case 2:  mode_str = "Connected"; break;
#        case 3:  mode_str = "Active"; break;
#      }
#      return mode_str;
#    web_server:
#      sorting_group_id: Diagnostic
#      sorting_weight: 21

#  - platform: modbus_controller
#    id: cloud_status
#    name: "Cloud status"
#    modbus_controller_id: mt
#    register_type: holding
#    address: 30302
#    raw_encode: NONE
#    icon: mdi:home-heart
#    entity_category: diagnostic
#    skip_updates: 60
#    lambda: |-
#      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
#      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
#      std::string mode_str;
#      switch (int_mode) {
#        case 0:  mode_str = "Disconnected"; break;
#        case 1:  mode_str = "Connected"; break;
#      }
#      return mode_str;
#    web_server:
#      sorting_group_id: Diagnostic
#      sorting_weight: 22

#  - platform: modbus_controller
#    id: power_restriction_discharge
#    name: "Power restriction"
#    modbus_controller_id: mt
#    register_type: holding
#    address: 41010
#    raw_encode: NONE
#    icon: mdi:home-heart
#    entity_category: diagnostic
#    skip_updates: 60
#    lambda: |-
#      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
#      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
#      std::string mode_str;
#      switch (int_mode) {
#        case 0:  mode_str = "Off"; break;
#        case 1:  mode_str = "800W limited"; break;
#      }
#      return mode_str;
#    web_server:
#      sorting_group_id: Diagnostic
#      sorting_weight: 23

# Binaire sensoren
binary_sensor:
  - platform: modbus_controller
    name: "${friendly_name} PLL Abnormal Restart"
    id: "marstek_pll_abnormal_restart"
    icon: mdi:flash-triangle
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x01
    skip_updates: 20

  - platform: modbus_controller
    name: "${friendly_name} Overtemperature Limit"
    icon: mdi:thermometer-alert
    id: "marstek_overtemperature_limit"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x02
    skip_updates: 20

  - platform: modbus_controller
    name: "${friendly_name} Low Temperature Limit"
    icon: mdi:thermometer-alert
    id: "marstek_low_temperature_limit"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x04
    skip_updates: 20

  - platform: modbus_controller
    name: "${friendly_name} Fan Abnormal Warning"
    icon: mdi:fan-alert
    id: "marstek_fan_abnormal_warning"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x08
    skip_updates: 20

  - platform: modbus_controller
    name: "${friendly_name} Low Battery SOC Warning"
    icon: mdi:battery-off-outline
    id: "marstek_low_battery_soc_warning"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x16
    skip_updates: 20

  - platform: modbus_controller
    name: "${friendly_name} Output Overcurrent Warning"
    icon: mdi:flash-triangle
    id: "marstek_output_overcurrent_warning"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x32
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Abnormal Line Sequence Detection"
    icon: mdi:flash-triangle
    id: "marstek_abnormal_line_sequence_detection"
    modbus_controller_id: mt
    register_type: holding
    address: 36000
    bitmask: 0x64
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Wifi Abnormal"
    icon: mdi:wifi-alert
    id: "marstek_wifi_abnormal"
    modbus_controller_id: mt
    register_type: holding
    address: 36001
    bitmask: 0x01
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BLE abnormal"
    icon: mdi:bluetooth-off
    id: "marstek_ble_abnormal"
    modbus_controller_id: mt
    register_type: holding
    address: 36001
    bitmask: 0x02
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} Network abnormal"
    icon: mdi:network-off
    id: "marstek_network_abnormal"
    modbus_controller_id: mt
    register_type: holding
    address: 36001
    bitmask: 0x04
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} CT connection abnormal"
    icon: mdi:robot-vacuum-alert
    id: "marstek_ct_connection_abnormal"
    modbus_controller_id: mt
    register_type: holding
    address: 36001
    bitmask: 0x08
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} Grid overvoltage"
    icon: mdi:flash-triangle
    id: "marstek_grid_overvoltage"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x01
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Grid undervoltage"
    icon: mdi:flash-triangle-outline
    id: "marstek_grid_undervoltage"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x02
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Grid overfrequency"
    icon: mdi:flash-triangle
    id: "marstek_grid_overfrequency"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x04
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Grid underfrequency"
    icon: mdi:flash-triangle
    id: "marstek_grid_underfrequency"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x08
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Grid peak voltage abnormal"
    icon: mdi:alert-plus
    id: "marstek_grid_peak_voltage_abnormal"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x10
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Current Dcover"
    icon: mdi:flash-triangle
    id: "marstek_current_dcover"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x20
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} Voltage Dcover"
    icon: mdi:flash-triangle
    id: "marstek_voltage_dcover"
    modbus_controller_id: mt
    register_type: holding
    address: 36100
    bitmask: 0x40
    skip_updates: 10

  - platform: modbus_controller
    name: "${friendly_name} BAT overvoltage"
    icon: mdi:flash-triangle
    id: "marstek_bat_overvoltage"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x01
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BAT undervoltage"
    icon: mdi:flash-triangle-outline
    id: "marstek_bat_undervoltage"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x02
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BAT overcurrent"
    icon: mdi:wave-undercurrent
    id: "marstek_bat_overcurrent"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x04
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BAT low SOC"
    icon: mdi:battery-off-outline
    id: "marstek_bat_low_soc"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x08
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BAT communication failure"
    icon: mdi:flash-triangle
    id: "marstek_bat_communication_failure"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x10
    skip_updates: 60

  - platform: modbus_controller
    name: "${friendly_name} BMS protect"
    icon: mdi:flash-triangle
    id: "marstek_bms_protect"
    modbus_controller_id: mt
    register_type: holding
    address: 36101
    bitmask: 0x20
    skip_updates: 60

# Sensoren
sensor:
  - name: "${friendly_name} Battery Wifi Signal Strength"
    id: marstek_battery_wifi_signal_strenght
    icon: mdi:wifi
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 30303
    value_type: U_WORD
    unit_of_measurement: "dBm"
    filters:
      - multiply: -1
    accuracy_decimals: 0   
    skip_updates: 60
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 7

  - platform: copy # Reports the Battery signal strength in %
    source_id: marstek_battery_wifi_signal_strenght
    name: "${friendly_name} Battery Wifi Signal"
    id: battery_wifi_signal_proc
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: diagnostic
    device_class: ""
    icon: mdi:wifi
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 6

  - platform: modbus_controller
    id: inverter_state  # No name, since it's internal
    icon: mdi:state-machine
    modbus_controller_id: mt
    register_type: holding
    address: 35100
    value_type: U_WORD
    internal: true # Hides from Home Assistant
    web_server:
      sorting_group_id: Info
      sorting_weight: 30

  - platform: modbus_controller
    id: software_version # No name, since it's internal
    icon: mdi:factory
    modbus_controller_id: mt
    register_type: holding
    address: 31100
    value_type: U_WORD
    accuracy_decimals: 0
    skip_updates: 60 # 5 minutes
    internal: true # Hides from Home Assistant
    on_value:
      then:
        - lambda: |-
            int version = (int)x;
            char buf[5];
            sprintf(buf, "V%d", version);
            id(software_version_text).publish_state(buf);

  - platform: modbus_controller
    id: firmware_version # No name, since it's internal
    icon: mdi:factory
    modbus_controller_id: mt
    register_type: holding
    address: 31101
    value_type: U_WORD
    accuracy_decimals: 0
    skip_updates: 300 # 5 minutes
    internal: true # Hides from Home Assistant
    on_value:
      then:
        - lambda: |-
            int version = (int)x;
            char buf[5];
            sprintf(buf, "V%d", version);
            id(firmware_version_text).publish_state(buf);

  - platform: modbus_controller
    id: bms_version
    icon: mdi:factory
    modbus_controller_id: mt
    register_type: holding
    address: 31102
    value_type: U_WORD
    accuracy_decimals: 0
    skip_updates: 300 # 5 minutes
    internal: true
    on_value:
      then:
        - lambda: |-
            int version = (int)x;
            char buf[5];
            sprintf(buf, "V%d", version);
            id(bms_version_text).publish_state(buf);
  
  - name: "${friendly_name} Battery Voltage (Average)"
    id: "marstek_battery_voltage_average"
    icon: mdi:sine-wave
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32100
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    state_class: measurement
    skip_updates: 60
    filters:
      - multiply: 0.01
    web_server:
      sorting_group_id: Info
      sorting_weight: 16
    
  - name: "${friendly_name} Battery Current (Average)"
    id: "marstek_battery_current_average"
    icon: mdi:current-dc
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32101
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 2
    state_class: measurement
    skip_updates: 60
    filters:
      - multiply: 0.01
    web_server:
      sorting_group_id: Info
      sorting_weight: 15

  - name: "${friendly_name} Battery Power"
    id: "marstek_battery_power"
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32102
    value_type: S_DWORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    web_server:
      sorting_group_id: Info
      sorting_weight: 14

  - name: "${friendly_name} Battery State Of Charge"
    id: "marstek_battery_state_of_charge" # Was marstek_soc
    platform: modbus_controller
    device_class: battery
    state_class: measurement
    modbus_controller_id: mt
    register_type: holding
    address: 32104
    value_type: U_WORD
    unit_of_measurement: "%"
    accuracy_decimals: 0
    web_server:
      sorting_group_id: Info
      sorting_weight: 5
    skip_updates: 20

# Slow Sensor
  - name: "${friendly_name} Battery Total Energy"
    id: "marstek_battery_total_energy" # Was marstek_total_energy
    icon: mdi:battery-charging-100
    platform: modbus_controller
    device_class: energy_storage
    state_class: measurement
    modbus_controller_id: mt
    register_type: holding
    address: 32105
    value_type: U_WORD
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001 # Firmware 148: 0.001 / Firmware 147: 0.01
    skip_updates: 30 # 5 minutes
    web_server:
      sorting_group_id: Info
      sorting_weight: 7

  - platform: template
    name: "${friendly_name} Battery Remaining Capacity"
    id: "marstek_battery_remaining_capacity"
    icon: mdi:battery-arrow-down-outline
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    update_interval: 18s
    lambda: |-
      if (id(marstek_battery_total_energy).has_state() && id(marstek_battery_state_of_charge).has_state()) {
        float total_energy = id(marstek_battery_total_energy).state;
        float soc = id(marstek_battery_state_of_charge).state / 100.0;
        return roundf(total_energy * soc * 100) / 100; // Ensures two decimal places
      }
      return NAN;
    web_server:
      sorting_group_id: Info
      sorting_weight: 6

  - name: "${friendly_name} AC Voltage"
    id: "marstek_ac_voltage"
    icon: mdi:current-ac
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32200
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    web_server:
      sorting_group_id: Info
      sorting_weight: 3
    skip_updates: 5

  - name: "${friendly_name} AC Current"
    id: "marstek_ac_current"
    icon: mdi:current-ac
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32201
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    web_server:
      sorting_group_id: Info
      sorting_weight: 2
    skip_updates: 5

# Slow Sensor
  - name: "${friendly_name} AC Power"
    id: "marstek_ac_power"
    icon: mdi:flash
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 32202
    value_type: S_DWORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    
    web_server:
      sorting_group_id: Info
      sorting_weight: 1

  - name: "${friendly_name} Total Charging Energy"
    id: "marstek_total_charging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33000
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    web_server:
      sorting_group_id: Info
      sorting_weight: 12
    skip_updates: 20

  - name: "${friendly_name} Total Discharging Energy"
    id: "marstek_total_discharging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33002
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    web_server:
      sorting_group_id: Info
      sorting_weight: 13
    skip_updates: 20

  - name: "${friendly_name} Daily Charging Energy"
    id: "marstek_daily_charging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33004
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    skip_updates: 20
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    web_server:
      sorting_group_id: Info
      sorting_weight: 8

  - name: "${friendly_name} Daily Discharging Energy"
    id: "marstek_daily_discharging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33006
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    skip_updates: 30
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    web_server:
      sorting_group_id: Info
      sorting_weight: 9

# Slow Sensor
  - name: "${friendly_name} Monthly Charging Energy"
    id: "marstek_monthly_charging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33008
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    skip_updates: 30 # 5 minutes
    web_server:
      sorting_group_id: Info
      sorting_weight: 10

# Slow Sensor
  - name: "${friendly_name} Monthly Discharging Energy"
    id: "marstek_monthly_discharging_energy"
    icon: mdi:chart-bar
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 33010
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 2
    skip_updates: 30 # 5 minutes
    web_server:
      sorting_group_id: Info
      sorting_weight: 11

  - name: "${friendly_name} Internal Temperature"
    id: "marstek_internal_temperature"
    icon: mdi:thermometer
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35000
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    skip_updates: 30 # 5 minutes
    web_server:
      sorting_group_id: Info
      sorting_weight: 19

  - name: "${friendly_name} Internal MOS1 Temperature"
    id: "marstek_internal_mos1_temperature"
    icon: mdi:thermometer
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35001
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    skip_updates: 30 # 5 minutes
    web_server:
      sorting_group_id: Info
      sorting_weight: 20

# Slow Sensor    
  - name: "${friendly_name} Internal MOS2 Temperature"
    id: "marstek_internal_mos2_temperature"
    icon: mdi:thermometer
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35002
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    skip_updates: 60 # 5 minutes
    filters:
      - multiply: 0.1
    web_server:
      sorting_group_id: Info
      sorting_weight: 21

  - name: "${friendly_name} Max. Cell Temperature"
    id: "marstek_max_cell_temperature"
    icon: mdi:thermometer
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35010
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    skip_updates: 60 # 5 minutes
    filters:
      - multiply: 0.1
    web_server:
      sorting_group_id: Info
      sorting_weight: 22
    
  - name: "${friendly_name} Min. Cell Temperature"
    id: "marstek_min_cell_temperature"
    icon: mdi:thermometer
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35011
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    web_server:
      sorting_group_id: Info
      sorting_weight: 23
    skip_updates: 60


  - name: "${friendly_name} Battery Charge Voltage Limit"
    id: "marstek_battery_charge_voltage_limit"
    icon: mdi:sine-wave
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35110
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 0.1
    web_server:
      sorting_group_id: Info
      sorting_weight: 16
    skip_updates: 60

  - name: "${friendly_name} Battery Charge Current Limit"
    id: "marstek_battery_charge_current_limit"
    icon: mdi:current-dc
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35111
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 0
    state_class: measurement
    skip_updates: 60 # 5 minutes
    filters:
      - multiply: 0.01
    web_server:
      sorting_group_id: Info
      sorting_weight: 17

  - name: "${friendly_name} Battery Discharge Current Limit"
    id: "marstek_battery_discharge_current_limit"
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 35112
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 0
    skip_updates: 60 # 5 minutes
    state_class: measurement
    filters:
      - multiply: 0.01
    web_server:
      sorting_group_id: Info
      sorting_weight: 18

  - name: "${friendly_name} Battery Maximum Cell Voltage"
    platform: modbus_controller
    icon: mdi:sine-wave
    modbus_controller_id: mt
    register_type: holding
    address: 37007
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    state_class: measurement
    filters:
      - multiply: 0.001
    id: marstek_max_cell_voltage
    skip_updates: 60
    web_server:
      sorting_group_id: Info
      sorting_weight: 24

  - name: "${friendly_name} Battery Minimum Cell Voltage"
    platform: modbus_controller
    icon: mdi:sine-wave
    modbus_controller_id: mt
    register_type: holding
    address: 37008
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    state_class: measurement
    filters:
      - multiply: 0.001
    id: marstek_min_cell_voltage
    skip_updates: 60
    web_server:
      sorting_group_id: Info
      sorting_weight: 25

  - platform: template
    name: "${friendly_name} Battery Cell Voltage Delta"
    icon: mdi:sine-wave
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 3
    state_class: measurement
    update_interval: 20s
    lambda: |-
      if (isnan(id(marstek_max_cell_voltage).state) || isnan(id(marstek_min_cell_voltage).state)) {
        return NAN;
      }
      return id(marstek_max_cell_voltage).state - id(marstek_min_cell_voltage).state;
    web_server:
      sorting_group_id: Info
      sorting_weight: 26

  # An internal sensor to check Modbus communication status.
  - platform: modbus_controller
    modbus_controller_id: mt
    name: "Modbus Status"
    icon: mdi:transit-connection
    id: "modbus_status" # Was modbus_status
    register_type: holding
    address: 32104  # Using the Battery SOC register as a reference
    value_type: U_WORD
    internal: true
    web_server:
      sorting_group_id: Diagnostic
      sorting_weight: 15
    skip_updates: 20

# Instellingen en modi (Select en Number)
select:
  - name: "${friendly_name} RS485 Control Mode"
    id: "marstek_rs485_control_mode"
    icon: mdi:connection
    platform: modbus_controller
    modbus_controller_id: mt
    address: 42000
    value_type: U_WORD
    optionsmap:
      "enable": 21930
      "disable": 21947
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 1

  - name: "${friendly_name} Forcible Charge/Discharge" 
    id: "marstek_forcible_chargedischarge"
    platform: modbus_controller
    modbus_controller_id: mt
    address: 42010
    value_type: U_WORD
    optionsmap:
      "stop": 0
      "charge": 1
      "discharge": 2
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 4

  - name: "${friendly_name} Backup Function"
    id: "marstek_backup_function"
    platform: modbus_controller
    modbus_controller_id: mt
    address: 41200
    value_type: U_WORD
    optionsmap:
      "enable": 0
      "disable": 1
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 3 

  - name: "${friendly_name} User Work Mode"
    id: "marstek_user_work_mode"
    icon: mdi:auto-mode
    platform: modbus_controller
    modbus_controller_id: mt
    address: 43000
    value_type: U_WORD
    optionsmap:
      "manual": 0
      "anti-feed": 1
      "ai": 2
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 2

number:
  - name: "${friendly_name} Forcible Charge Power"
    id: "marstek_forcible_charge_power"
    icon: mdi:tune-variant
    mode: box
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 42020
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 5

  - name: "${friendly_name} Charge To SOC"
    id: "marstek_charge_to_soc"
    icon: mdi:battery-charging-medium 
    mode: box
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 42011
    value_type: U_WORD
    unit_of_measurement: "%"
    min_value: 12
    max_value: 100
    step: 1
    skip_updates: 20
    web_server:
      sorting_group_id: Control
      sorting_weight: 9

  - name: "${friendly_name} Forcible Discharge Power"
    id: "marstek_forcible_discharge_power"
    icon: mdi:tune-variant
    mode: box
    platform: modbus_controller
    modbus_controller_id: mt
    register_type: holding
    address: 42021
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 10
    web_server:
      sorting_group_id: Control
      sorting_weight: 6

#  - name: "${friendly_name} Charging Cutoff Capacity"
#    id: "marstek_charging_cutoff_capacity"
#    icon: mdi:battery-90
#    platform: modbus_controller
#    modbus_controller_id: mt
#    register_type: holding
#    address: 44000
#    value_type: U_WORD
#    unit_of_measurement: "%"
#    min_value: 80
#    max_value: 100
#    multiply: 10
#    skip_updates: 60

#  - name: "${friendly_name} Discharging Cutoff Capacity"
#    id: "marstek_discharging_cutoff_capacity"
#    icon: mdi:battery-10
#    platform: modbus_controller
#    modbus_controller_id: mt
#    register_type: holding
#    address: 44001
#    value_type: U_WORD
#    unit_of_measurement: "%"
#    min_value: 12
#    max_value: 30
#    multiply: 10
#    skip_updates: 60

#  - name: "${friendly_name} Max. Charge Power"
#    id: "marstek_max_charge_power"
#    icon: mdi:tune-variant
#    mode: box
#    platform: modbus_controller
#    modbus_controller_id: mt
#    register_type: holding
#    address: 44002
#    value_type: U_WORD
#    unit_of_measurement: "W"
#    min_value: 0
#    max_value: 2500
#    step: 1

# Slow Sensor
#  - name: "${friendly_name} Max. Discharge Power"
#    id: "marstek_max_discharge_power"
#    icon: mdi:tune-variant
#    mode: box
#    platform: modbus_controller
#    modbus_controller_id: mt
#    register_type: holding
#    address: 44003
#    value_type: U_WORD
#    unit_of_measurement: "W"
#    min_value: 0
#    max_value: 2500
#    step: 1
#    skip_updates: 2 # 10 seconds

###############################################################################
# Optional: Status LED (if you have one connected to GPIO4)
###############################################################################
# light:
#   - platform: neopixelbus
#     type: GRB
#     variant: WS2812
#     pin: GPIO4
#     num_leds: 1
#     name: "Status LED"
#     id: status_led

# interval:
#   - interval: 5s
#     then:
#       - lambda: |-
#           ESP_LOGD("status", "Modbus: %.0f, WiFi: %.0f", id(modbus_status).state, id(${friendly_name} Wifi Signal).state);
#       - if:
#           condition:
#             lambda: |-
#               return !isnan(id(modbus_status).state) && id(${friendly_name} Wifi Signal).state > -80;
#           then:
#             - light.turn_on:
#                 id: status_led
#                 red: 0%
#                 green: 100%  # 🟢 Green = Modbus OK & WiFi strong
#                 blue: 0%
#           else:
#             - if:
#                 condition:
#                   lambda: |-
#                     return isnan(id(modbus_status).state) && id(${friendly_name} Wifi Signal).state < -80;
#                 then:
#                   - light.turn_on:
#                       id: status_led
#                       red: 100%  # 🟣 Purple = Both Modbus & WiFi failed
#                       green: 0%
#                       blue: 100%
#                 else:
#                   - if:
#                       condition:
#                         lambda: |-
#                           return id(${friendly_name} Wifi Signal).state < -80;
#                       then:
#                         - light.turn_on:
#                             id: status_led
#                             red: 0%
#                             green: 0%
#                             blue: 100%  # 🔵 Blue = Weak WiFi signal (< -80 dBm)
#                       else:
#                         - light.turn_on:
#                             id: status_led
#                             red: 100%  # 🔴 Red = Modbus error, WiFi OK
#                             green: 0%
#                             blue: 0%
